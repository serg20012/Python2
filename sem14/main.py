# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
# –∫—Ä–æ–º–µ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤.
# üìå –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.

import doctest
import unittest
from string import ascii_lowercase as latin


def delete_test(text: str):
    '''
    >>> delete_test('hello')
    'hello'
    >>> delete_test('Hello')
    'hello'
    >>> delete_test('hello,')
    'hello'
    >>> delete_test('hello, –º–∏—Ä!')
    'hello '
    >>> delete_test('Hello, World!')
    'hello world'
    '''
    result = ''
    text = text.lower()
    # latin = 'abcdefghijklmnopqrstuvwxyz'
    for char in text:
        if char in latin or char == " ":
            result += char
    return result


res = delete_test('Hello, –ø—Ä–∏–≤–µ—Ç How, World!')
print(res)

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 1 —Ç–µ—Å—Ç—ã doctest. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ
# —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏
# —Å–∏–º–≤–æ–ª–æ–≤
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –±—É–∫–≤ –¥—Ä—É–≥–∏—Ö –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
# (–∫—Ä–æ–º–µ –ø. 1)

# doctest.testmod(verbose=True)


# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 1 —Ç–µ—Å—Ç—ã unittest. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ
# —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏
# —Å–∏–º–≤–æ–ª–æ–≤
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –±—É–∫–≤ –¥—Ä—É–≥–∏—Ö –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
# (–∫—Ä–æ–º–µ –ø. 1)
# from string import ascii_lowercase as latin
# import unittest


# class TestString(unittest.TestCase):
#     def test_not_change(self):
#         self.assertEqual(delete_test('hello'), 'hello')

#     def test_lower(self):
#         self.assertEqual(delete_test('Hello'), 'hello')

#     def test_punctuation(self):
#         self.assertEqual(delete_test('hello, !'), 'hello ')

#     def test_other_alphabet(self):
#         self.assertEqual(delete_test('Hello, –º–∏—Ä!'), 'hello ')

#     def test_all(self):
#         self.assertEqual(delete_test('Hello, World, –º–∏—Ä!'), 'hello world ')


# def delete_test(text: str):
#     result = ''
#     text = text.lower()
#     # latin = 'abcdefghijklmnopqrstuvwxyz'
#     for char in text:
#         if char in latin or char == " ":
#             result += char
#     return result


# unittest.main(verbosity=2)

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 1 —Ç–µ—Å—Ç—ã pytest. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ
# –≤–∞—Ä–∏–∞–Ω—Ç—ã:
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏
# —Å–∏–º–≤–æ–ª–æ–≤
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –±—É–∫–≤ –¥—Ä—É–≥–∏—Ö –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
# (–∫—Ä–æ–º–µ –ø. 1)

# from string import ascii_lowercase as latin
# import pytest


# def test_not_change():
#     assert delete_test('hello') == 'hello'


# def test_lower():
#     assert delete_test('Hello') == 'hello'


# def test_punctuation():
#     assert delete_test('hello, !') == 'hello '


# def test_other_alphabet():
#     assert delete_test('Hello, –º–∏—Ä!'), 'hello '


# def test_all():
#     assert delete_test('Hello, World, –º–∏—Ä!') == 'hello world '


# def delete_test(text: str):
#     result = ''
#     text = text.lower()
#     # latin = 'abcdefghijklmnopqrstuvwxyz'
#     for char in text:
#         if char in latin or char == " ":
#             result += char
#     return result


# if __name__ == '__main__':
#     pytest.main()


# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –ø–æ –û–û–ü –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
# —Ö—Ä–∞–Ω—è—â–∏–π –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É, –∞ —Ç–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è—é—â—É—é –ø–µ—Ä–∏–º–µ—Ç—Ä,
# –ø–ª–æ—â–∞–¥—å –∏ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å
# –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –±–µ—Ä—è –∑–∞ –æ—Å–Ω–æ–≤—É –ø–µ—Ä–∏–º–µ—Ç—Ä.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è.
# üìå –ü—Ä–∏ —ç—Ç–æ–º –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
# –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
# üìå –°–∫–ª–∞–¥—ã–≤–∞–µ–º –∏ –≤—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä—ã, –∞ –Ω–µ –¥–ª–∏–Ω–Ω—É –∏ —à–∏—Ä–∏–Ω—É.
# üìå –ü—Ä–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

# import random
# import unittest


# class Pryme:
#     def __init__(self, x, y=None):
#         self.x = x
#         if y:
#             self.y = y
#         else:
#             self.y = x

#     def per(self):
#         p = self.x + self.x + self.y + self.y
#         print(p)
#         return p

#     def s(self):
#         s = self.x*self.y
#         return s

#     def __add__(self, other):
#         x3 = self.x
#         new_per = self.per() + other.per()
#         y3 = (new_per - 2 * x3) / 2
#         return Pryme(x3, y3)

#     def __sub__(self, other):
#         new_per = self.per() - other.per()
#         if new_per <= 0:
#             raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π –ø–µ—Ä–∏–º–µ—Ç—Ä –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º.")
#         else:
#             x3 = 0
#             y3 = 0
#             while x3 <= 0 or y3 <= 0:
#                 x3 = random.randint(1, new_per)
#                 y3 = (new_per - 2 * x3) / 2
#             return Pryme(x3, y3)

#     def __eq__(self, other) -> bool:
#         return self.x == other.x and self.y == other.y


# class TestPryme(unittest.TestCase):
#     def setUp(self) -> None:
#         self.r1 = Pryme(3, 5)
#         self.r2 = Pryme(4, 6)
#         self.r3 = Pryme(1, 1)

#     def test_add_perimetr(self):
#         self.assertEqual(self.r1 + self.r2, Pryme(3, 15))

#     def test_created_object(self):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞.
#         self.assertEqual(Pryme(3, 5), self.r1)

#     def test_perimetr(self):
#         self.assertEqual(self.r1.per(), 16)

#     def test_square(self):
#         self.assertEqual(self.r1.s(), 15)


# unittest.main(verbosity=2)

# c1 = Pryme(3, 5)
# # c2 = Pryme(14, 14)
# print(c1.per())
# # c3 = c1-c2
# # print(c3.per())
# # print(c3.x, c3.y)

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ 13 –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º—è, id, —É—Ä–æ–≤–µ–Ω—å).
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ pytest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
# üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã.

# import pytest
# import json


# class UserError(Exception):
#     pass


# class LevelError(UserError):
#     pass


# class AccessError(UserError):
#     def __str__(self) -> str:
#         return ' net usera '


# class User:
#     def __init__(self, name, id, level):
#         self.name = name
#         self.id = id
#         self.level = level

#     def __repr__(self) -> str:
#         return f'User({self.name}, {self.id}, {self.level})'

#     def __eq__(self, owner) -> bool:
#         if self.name == owner.name and self.id == owner.id:
#             return True
#         else:
#             return False

#     def __hash__(self) -> int:
#         return hash((self.name, self.id))


# file_name = "task4"


# class SignIn:

#     def __init__(self) -> None:
#         self.temp_user = None
#         self.set_user = set()

#     def text_json(self, file_name):
#         with open(f'.\\sem14\\{file_name}.json', 'r', encoding='utf-8') as f2:
#             data = json.load(f2)

#         for level, value in data.items():
#             for id, name in value.items():
#                 self.set_user.add(User(name, id, level))

#         return self.set_user

#     def sign_in(self, my_name, my_id):
#         new_user = User(my_name, my_id, 0)
#         if new_user not in self.set_user:
#             raise AccessError
#         else:
#             for user in self.set_user:
#                 if user == new_user:
#                     self.temp_user = user
#                     return self.temp_user

#     def add(self, name, id, lvl):
#         if lvl < self.temp_user.level:
#             raise LevelError
#         else:
#             new_user = User(name, id, 1)
#             self.set_user.add(new_user)
#         return new_user

#     def show(self):
#         return self.set_user


# @pytest.fixture
# def data():
#     sg1 = SignIn()
#     sg2 = SignIn()
#     user1 = User('vova', '788', 0)
#     user2 = User('pety', '25', 3)


# @pytest.fixture()
# def set_user():
#     user_set = {
#         User("serg", "123", "1"),
#         User("Pupkin", "34", "1"),
#         User("vova", "788", "3"),
#         User("dasa", "789", "5")
#     }
#     return user_set


# def test_sign_in():
#     sign = SignIn()
#     sign.text_json(file_name)
#     result = sign.sign_in('vova', '788')
#     assert result == User('vova', '788', '3')


# def test_load(set_user):
#     sign_in = SignIn()
#     res = sign_in.text_json(file_name)
#     assert res == set_user


# def test_1():
#     assert 1 == 1


# if __name__ == '__main__':
#     pytest.main()
