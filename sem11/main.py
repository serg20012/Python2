# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ú–æ—è –°—Ç—Ä–æ–∫–∞, –≥–¥–µ:
# üìå –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ str
# üìå –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
# (time.time)

# import time


# class MyStr(str):
#     """ –ö–ª–∞—Å—Å –ú–æ—è –°—Ç—Ä–æ–∫–∞, –≥–¥–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ str –∏ –¥–æ–ª–æ–ø–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è"""
#     def __new__(cls, value, name):
#         """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞"""
#         instance = super().__new__(cls, value)
#         instance.name = name
#         instance.tme = time.time()
#         return instance


# s = MyStr('–ü—Ä–∏–≤–µ—Ç', '–í–∞—Å—è')
# print(s.upper())
# print(f'{s.name = }')
# print(f'{s.tme = }')
# print(MyStr.__doc__)

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—É —Å–≤–æ–π—Å—Ç–≤.
# –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –∏ —Å—Ç—Ä–æ–∫—É.
# üìå –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ
# —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞—Ä—É —Å–ø–∏—Å–∫–æ–≤-
# –∞—Ä—Ö–∏–≤–æ–≤
# üìå list-–∞—Ä—Ö–∏–≤—ã —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞


# class Arhiv():
#     list_number = []
#     list_string = []

#     def __init__(self, number, string):
#         self.value = number
#         self.name = string
#         Arhiv.list_number.append(number)
#         Arhiv.list_string.append(string)


# my_archiv1 = Arhiv(42, '–ü—Ä–∏–≤–µ—Ç')
# print(my_archiv1.list_number)  # –í—ã–≤–æ–¥: [42]
# print(my_archiv1.list_string)  # –í—ã–≤–æ–¥: ['–ü—Ä–∏–≤–µ—Ç']

# my_archiv2 = Arhiv(12, '–≤—Ç–æ—Ä–æ–π')
# print(my_archiv2.list_number)  # –í—ã–≤–æ–¥: [42, 12]
# print(my_archiv2.list_string)  # –í—ã–≤–æ–¥: ['–ü—Ä–∏–≤–µ—Ç', '–≤—Ç–æ—Ä–æ–π']

# my_archiv3 = Arhiv(13, '—Ç—Ä–µ—Ç–∏–π')
# print(my_archiv3.list_number)  # –í—ã–≤–æ–¥: [42, 12, 13]
# print(my_archiv3.list_string)  # –í—ã–≤–æ–¥: ['–ü—Ä–∏–≤–µ—Ç', '–≤—Ç–æ—Ä–æ–π', '—Ç—Ä–µ—Ç–∏–π']

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤ –∏–∑ –∑–∞–¥–∞—á–∏ 2.
# üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞
# –∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

# class Arhiv():
#     list_number = []
#     list_string = []

#     def __init__(self, number, string):
#         self.value = number
#         self.name = string
#         Arhiv.list_number.append(number)
#         Arhiv.list_string.append(string)

#     def __repr__(self):
#         return f'–≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Arhiv({self.value}, {self.name})'

#     def __str__(self):
#         return f' —á—Ç–æ —Ç–æ Arhiv({self.value}, {self.name})'


# my_archiv1 = Arhiv(42, '–ü—Ä–∏–≤–µ—Ç')

# print(my_archiv1)
# print(repr(my_archiv1))
# print(my_archiv1.__str__)

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è.
# üìå –ü—Ä–∏ —ç—Ç–æ–º –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
# –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
# üìå –°–∫–ª–∞–¥—ã–≤–∞–µ–º –∏ –≤—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä—ã, –∞ –Ω–µ –¥–ª–∏–Ω–Ω—É –∏ —à–∏—Ä–∏–Ω—É.
# üìå –ü—Ä–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

# import random


# class Pryme:
#     def __init__(self, x, y=None):
#         self.x = x
#         if y:
#             self.y = y
#         else:
#             self.y = x

#     def per(self):
#         p = self.x + self.x + self.y + self.y
#         return p

#     def s(self):
#         s = self.x*self.y
#         return s

#     def __add__(self, other):
#         x3 = self.x
#         new_per = self.per() + other.per()
#         y3 = (new_per - 2 * x3) / 2
#         return Pryme(x3, y3)

#     def __sub__(self, other):
#         new_per = self.per() - other.per()
#         if new_per <= 0:
#             raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π –ø–µ—Ä–∏–º–µ—Ç—Ä –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º.")
#         else:
#             x3 = 0
#             y3 = 0
#             while x3 <= 0 or y3 <= 0:
#                 x3 = random.randint(1, new_per)
#                 y3 = (new_per - 2 * x3) / 2
#             return Pryme(x3, y3)


# c1 = Pryme(25, 7)
# c2 = Pryme(14, 14)
# c3 = c1-c2
# print(c3.per())
# print(c3.x, c3.y)

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ—à–ª—É—é –∑–∞–¥–∞—á—É.
# üìå –î–æ–±–∞–≤—å—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –ø–ª–æ—â–∞–¥–∏
# üìå –î–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —à–µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

# import random


# class Pryme:
#     def __init__(self, x, y=None):
#         self.x = x
#         if y:
#             self.y = y
#         else:
#             self.y = x

#     def per(self):
#         p = self.x + self.x + self.y + self.y
#         return p

#     def s(self):
#         s = self.x*self.y
#         return s

#     def __add__(self, other):
#         x3 = self.x
#         new_per = self.per() + other.per()
#         y3 = (new_per - 2 * x3) / 2
#         return Pryme(x3, y3)

#     def __sub__(self, other):
#         new_per = self.per() - other.per()
#         if new_per <= 0:
#             raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π –ø–µ—Ä–∏–º–µ—Ç—Ä –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º.")
#         else:
#             x3 = 0
#             y3 = 0
#             while x3 <= 0 or y3 <= 0:
#                 x3 = random.randint(1, new_per)
#                 y3 = (new_per - 2 * x3) / 2
#             return Pryme(x3, y3)

#     def __eq__(self, other):
#         return self.s() == other.s()


# c1 = Pryme(10, 10)
# c2 = Pryme(50, 2)
# print(c1.s())
# print(c2.s())
# # c3 = c1-c2
# print(c1 == c2)
