# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –ø—Ä–∏
# –≤—ã–∑–æ–≤–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –∑–Ω–∞—á–µ–Ω–∏–π.
# üìå –ü–∞—Ä–∞–º–µ—Ç—Ä k –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏
# –∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤.

# class Factorial:
#     history = []

#     def __init__(self, k):
#         self.k = k

#     def calculate_factorial(self, n):
#         result = 1
#         for i in range(1, n + 1):
#             result *= i

#         if len(self.history) >= self.k:
#             self.history.pop(0)
#         self.history.append(result)
#         return result

#     def get_history(self):
#         return self.history

# f = Factorial(3)

# print(f.calculate_factorial(2))
# print(f.calculate_factorial(3))
# print(f.calculate_factorial(4))
# print(f.calculate_factorial(5))
# print(f.calculate_factorial(6))
# print(f.calculate_factorial(10))
# print(f.get_history())

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 1.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
# —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª.

# import json


# class Factorial:

#     def __init__(self, k):
#         self.k = k
#         self.history = []

#     def calculate_factorial(self, n):
#         result = 1
#         for i in range(1, n + 1):
#             result *= i

#         if len(self.history) >= self.k:
#             self.history.pop(0)
#         self.history.append((n, result))
#         return result

#     def get_history(self):
#         return self.history

#     def __enter__(self):
#         print('Enter')
#         return self

#     def __exit__(self, exc_type, exc_val, exc_tb):
#         my_dict = {}
#         for n, result in self.history:
#             my_dict[n] = result
#         print(my_dict)
#         with open('factorial.json', 'w', encoding='utf-8') as f1:
#             print('Exit')
#             json.dump(my_dict, f1)


# with Factorial(3) as f:
#     print(f.calculate_factorial(2))
#     print(f.calculate_factorial(3))
#     print(f.calculate_factorial(4))
#     print(f.calculate_factorial(5))
#     print(f.calculate_factorial(6))
#     print(f.calculate_factorial(10))
#     print(f.get_history())

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
# üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –≤
# –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ stop —Å —à–∞–≥–æ–º step.
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å—á–∏—Ç–∞–µ–º step=1.
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º start=1.

# class Factorial:
#     def __init__(self, *args):
#         if len(args) == 3:
#             self.start, self.stop, self.step = args
#         elif len(args) == 2:
#             self.start, self.stop = args
#             self.step = 1
#         else:
#             self.start = 1
#             self.stop = args[0]
#             self.step = 1

#     def __iter__(self):
#         return self

#     def __next__(self):
#         while self.start < self.stop:
#             result = 1
#             for i in range(1, self.start+1):
#                 result *= i
#             self.start += self.step
#             return result
#         raise StopIteration


# f = Factorial(3, 10, 2)
# for i in f:
#     print(i)

# print(f.calculate_factorial(1, 5, 1))

# with Factorial(3) as f:
#     print(f.calculate_factorial(2))
#     print(f.calculate_factorial(3))
#     print(f.calculate_factorial(4))
#     print(f.calculate_factorial(5))
#     print(f.calculate_factorial(6))
#     print(f.calculate_factorial(10))
#     print(f.get_history())

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω—è—Ç—å –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É
# –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏ –≤—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
# (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö).
# üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–π—Å—Ç–≤.


import random


class Pryme:
    def __init__(self, x, y=None):
        self._x = x
        if y:
            self._y = y
        else:
            self._y = x

    @property
    def x(self):
        return self._x

    @property
    def y(self):
        return self._y

    @x.setter
    def x(self, value):
        if value <= 0:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x")
        else:
            self._x = value

    @y.setter
    def y(self, value):
        if value <= 0:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ y")
        else:
            self._y = value

    def per(self):
        p = self._x + self._x + self._y + self._y
        return p

    def s(self):
        s = self._x*self._y
        return s

    def __add__(self, other):
        x3 = self._x
        new_per = self.per() + other.per()
        y3 = (new_per - 2 * x3) / 2
        return Pryme(x3, y3)

    def __sub__(self, other):
        new_per = self.per() - other.per()
        if new_per <= 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π –ø–µ—Ä–∏–º–µ—Ç—Ä –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º.")
        else:
            x3 = 0
            y3 = 0
            while x3 <= 0 or y3 <= 0:
                x3 = random.randint(1, new_per)
                y3 = (new_per - 2 * x3) / 2
            return Pryme(x3, y3)


c1 = Pryme(25, 7)
c2 = Pryme(14, 14)
c3 = Pryme(-100, 50)
print(c3.x)
# print(c3.x, c1.y)
