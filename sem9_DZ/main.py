# –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# ‚óã –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
# ‚óã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è csv —Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–º—è —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ.
# 100-1000 —Å—Ç—Ä–æ–∫.
# ‚óã –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ
# —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–∞–∂–¥–æ–π —Ç—Ä–æ–π–∫–æ–π —á–∏—Å–µ–ª –∏–∑ csv —Ñ–∞–π–ª–∞.
# ‚óã –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã
# —Ñ—É–Ω–∫—Ü–∏–∏ –≤ json —Ñ–∞–π–ª.
# üìå –°–æ–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Å –∏–≥—Ä–∞–º–∏ –∏–∑ —Ç–µ—Ö —Ñ–∞–π–ª–æ–≤, —á—Ç–æ —É–∂–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞

import csv
import json

import random
import math
from typing import Callable


def quad_deco(func: Callable):
    def wrapper(a, b, c):
        my_result = []
        with open('.\\sem9_DZ\\random.csv', 'r', newline='', encoding='utf-8') as f2:
            my_dict = csv.reader(f2)
            for line in my_dict:
                a, b, c = map(int, line)
                result = func(a, b, c)
                my_result.append(result)

            with open('.\sem9_DZ\\main.json', 'w', encoding='utf-8') as f3:
                json.dump(my_result, f3, ensure_ascii=False, indent=4)
    return wrapper


@quad_deco
def solve_quadratic_equation(a, b, c):
    a1 = math.sqrt(a)
    b1 = math.sqrt(b)
    c1 = math.sqrt(c)
    return a1, b1, c1


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –∏ –∑–∞–ø–∏—Å—å –∏—Ö –≤ CSV —Ñ–∞–π–ª


def generate_csv(num_rows):
    with open('.\\sem9_DZ\\random.csv', 'w', newline='') as csvfile:
        csvwriter = csv.writer(csvfile)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –∏ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        for _ in range(num_rows):
            num1 = random.randint(1, 1000)
            num2 = random.randint(1, 1000)
            num3 = random.randint(1, 1000)
            csvwriter.writerow([num1, num2, num3])


if __name__ == '__main__':

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    num_rows = random.randint(10, 100)

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV —Ñ–∞–π–ª–∞
    generate_csv(num_rows)

    a = 244
    b = 24
    c = 144
    roots = solve_quadratic_equation(a, b, c)

    print("–ö–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è:", roots)
